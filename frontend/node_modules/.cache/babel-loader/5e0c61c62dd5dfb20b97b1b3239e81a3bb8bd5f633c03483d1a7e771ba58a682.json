{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.response.use(response => response, error => {\n  if (error.response) {\n    var _error$response$data, _error$response$data2;\n    const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.detail) || `Server error: ${error.response.status}`;\n    throw new Error(message);\n  } else if (error.request) {\n    throw new Error('Unable to connect to the server. Please check your connection and try again.');\n  } else {\n    throw new Error('An unexpected error occurred. Please try again.');\n  }\n});\nexport const predictExoplanet = async formData => {\n  try {\n    const response = await api.post('/api/predict', formData);\n    return response.data;\n  } catch (error) {\n    console.error('Prediction error:', error);\n    throw error;\n  }\n};\nexport const healthCheck = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    console.error('Health check error:', error);\n    throw error;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","response","use","error","_error$response$data","_error$response$data2","message","data","detail","status","Error","request","predictExoplanet","formData","post","console","healthCheck","get"],"sources":["/home/muhammad-ilyas-khan/Desktop/files/programming/nasahackathon/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response) {\n      const message = error.response.data?.error || \n                    error.response.data?.detail || \n                    `Server error: ${error.response.status}`;\n      throw new Error(message);\n    } else if (error.request) {\n      throw new Error('Unable to connect to the server. Please check your connection and try again.');\n    } else {\n      throw new Error('An unexpected error occurred. Please try again.');\n    }\n  }\n);\n\nexport const predictExoplanet = async (formData) => {\n  try {\n    const response = await api.post('/api/predict', formData);\n    return response.data;\n  } catch (error) {\n    console.error('Prediction error:', error);\n    throw error;\n  }\n};\n\nexport const healthCheck = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    console.error('Health check error:', error);\n    throw error;\n  }\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEFJ,GAAG,CAACK,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC1BD,QAAQ,IAAKA,QAAQ,EACrBE,KAAK,IAAK;EACT,IAAIA,KAAK,CAACF,QAAQ,EAAE;IAAA,IAAAG,oBAAA,EAAAC,qBAAA;IAClB,MAAMC,OAAO,GAAG,EAAAF,oBAAA,GAAAD,KAAK,CAACF,QAAQ,CAACM,IAAI,cAAAH,oBAAA,uBAAnBA,oBAAA,CAAqBD,KAAK,OAAAE,qBAAA,GAC5BF,KAAK,CAACF,QAAQ,CAACM,IAAI,cAAAF,qBAAA,uBAAnBA,qBAAA,CAAqBG,MAAM,KAC3B,iBAAiBL,KAAK,CAACF,QAAQ,CAACQ,MAAM,EAAE;IACtD,MAAM,IAAIC,KAAK,CAACJ,OAAO,CAAC;EAC1B,CAAC,MAAM,IAAIH,KAAK,CAACQ,OAAO,EAAE;IACxB,MAAM,IAAID,KAAK,CAAC,8EAA8E,CAAC;EACjG,CAAC,MAAM;IACL,MAAM,IAAIA,KAAK,CAAC,iDAAiD,CAAC;EACpE;AACF,CACF,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;EAClD,IAAI;IACF,MAAMZ,QAAQ,GAAG,MAAMN,GAAG,CAACmB,IAAI,CAAC,cAAc,EAAED,QAAQ,CAAC;IACzD,OAAOZ,QAAQ,CAACM,IAAI;EACtB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdY,OAAO,CAACZ,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMa,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMN,GAAG,CAACsB,GAAG,CAAC,SAAS,CAAC;IACzC,OAAOhB,QAAQ,CAACM,IAAI;EACtB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdY,OAAO,CAACZ,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,eAAeR,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}